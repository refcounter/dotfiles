set shell sh

set ifs "\n"
set shellopts '-eu'

set scrolloff 10
set icons
set drawbox
set previewer stpv
set cleaner stpvimgclr
&stpvimg --listen $id
cmd on-quit $stpvimg --end $id


cmd open &{{
    case $(file --mime-type $f -b) in
        text/*) lf -remote "send $id \$nvim \$fx";;
        image/*) feh "$f";;
        video/*) vlc "$f";;
        application/pdf|application/epub+zip) zathura "$f";;
        
    *) for f in $fx; do echo mimeopen --ask $f > /dev/null 2> /dev/null & done;;
    esac
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

# Edit and reaload on-the-fly
cmd edit-config ${{
    $EDITOR ~/.config/lf/lfrc
    lf -remote "send $id source ~/.config/lf/lfrc"
}}

map C edit-config

# toggle preview column
cmd toggle_preview %{{
    if [ "$lf_preview" = "true" ]; then
        lf -remote "send $id :set preview false; set ratios 1:5"
    else
        lf -remote "send $id :set preview true; set ratios 1:2:3"
    fi
}}

map zp toggle_preview

# asynchronous copy
cmd paste-async &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    case "$mode" in
        copy) cp -rn -- "$@" .;;
        move) mv -n -- "$@" .;;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
}}

map P paste-async

cmd yank-dirname $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard

cmd yank-basename-without-extension ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a |
      awk -e '{
        for (i=length($0); i > 0; i--) {
          if (substr($0, i, 1) == ".") {
            if (i == 1) print $0
            else print substr($0, 0, i-1)

            break
          }
        }

        if (i == 0)
          print $0
      }' |
      if [ -n "$fs" ]; then cat; else tr -d '\n'; fi |
      xclip -i -selection clipboard
}}

cmd open-with-gui &$@ $fx ## opens with a gui application outside lf client
cmd open-with-cli $$@ $fx ## opens with a cli application inside lf client
map O push :open-with-gui<space> ## input application
map o push :open-with-cli<space> ## input application

# Run a command with space escaped
cmd run-escaped %{{
  IFS=" "
  cmd="$1"
  shift
  "$cmd" "$*"
  echo "$*"
}}
map \\ push :run-escaped<space>

cmd select-files &{{
    get_files() {
        if [ "$lf_hidden" = 'false' ]; then
            find "$PWD" -mindepth 1 -maxdepth 1 -type f -not -name '.*' -print0
        else
            find "$PWD" -mindepth 1 -maxdepth 1 -type f -print0
        fi |
        xargs -0 printf ' %q'
    }

    lf -remote "send $id :unselect; toggle $(get_files)"
}}

cmd select-dirs &{{
    get_dirs() {
        if [ "$lf_hidden" = 'false' ]; then
            find "$PWD" -mindepth 1 -maxdepth 1 -type d -not -name '.*' -print0
        else
            find "$PWD" -mindepth 1 -maxdepth 1 -type d -print0
        fi |
        xargs -0 printf ' %q'
    }

    lf -remote "send $id :unselect; toggle $(get_dirs)"
}}

cmd bookmark_jump ${{
    res="$(cat $LF_BOOKMARK_PATH/$(ls $LF_BOOKMARK_PATH | fzf))"
    lf -remote "send $id cd \"$res\""
}}
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

map . set hidden!
map p paste
map x cut
map y copy
map D delete
map R reload
map mf mkfile
map md mkdir

# Frequently used folders
alias cd=z
map gc cd ~/.config/
map gm cd /media/
map gP cd ~/Pictures/
map gr cd ~/fromgit/
map gp cd ~/projs/
map gv cd /media/para_sistema/old/uv01d/
map gu %cd -
map <enter> shell

# show 1 pannel or 2 pannel
map zw %lf -remote "send $id set ratios 1:2"
map zW %lf -remote "send $id set ratios 1:2:3"
map <c-f> $lf -remote "send $id select \"$(fzf)\""

cmd bookmark_create ${{
    read ans
    echo $PWD > $LF_BOOKMARK_PATH/$ans
}}

